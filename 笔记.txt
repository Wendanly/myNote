#h5平台:简单理解为是用网址访问的，如：网站-H5手机端，即在手机上用网址访问的系统；

#vue 中，若data里引入了sessionStorage里的内容，但无对应的key值，则会报错，关键是此问题会影响程序运行，导致页面出不来
如：username: JSON.parse(sessionStorage.getItem("tapUserInfo")).userName ，sessionStorage里没有tapUserInfo，此时JSON.parse(tapUserInfo).userName 则会报错，导致页面程序停止运行

#vue.config.js 
1、代理的意思：https://blog.csdn.net/iteye_10432/article/details/103757786
proxy('/label', {...}) - 匹配以/api开始的路径，显然那些.JS、.css的文件就被顾虑掉了，只剩下前端调api请求接口的路径了，如：/label/sysManage/addApi.do
  proxy: {
      '/label': { 
        target: 'http://localhost:18989', // 后端域名及端口（端口后面也可以添加路径），若不考虑pathRewrite字段，则此时的请求路径是http://localhost:18989/label/sysManage/addApi.do
        secure: false,
        changeOrigin: true,
        timeout: 1800000,
		pathRewrite:{
		'/label':'',  //若此时添加此字段，则此时的路径是http://localhost:18989/sysManage/addApi.do ,即label就被去掉了
		},
      },
    }
通常情况下label 是前端自己定的，因为后端可能没这一层路径，所以不靠谱，还是自己加一层比较好。前端部署用nginx转发时也要用此通配符匹配

#vue-router里的resolve是干嘛的？ https://segmentfault.com/q/1010000021567820
这是异步加载代码的旧写法.
你可以改写成以下比较容易理解的写法.
component:()=>import('@/views/......')

#this.$router.resolve();https://www.jianshu.com/p/a5ef6eb32b76
resolve方法会返回一个跳转路由对象，可携带参数：

#window.open() 认识：https://www.douban.com/note/619576290/
window.open(url,'_blank'); //url若是 http://www.baidu.com这种，则直接跳转；若是文件路径，则会把当前的域名拼接在前面，如：浏览器里当前路径为http://localhost:8081/tjTowerWeb，
现执行 window.open('/Overview','_blank');//则在新窗口里的地址为 http://localhost:8081/tjTowerWeb/Overview，此时新窗口里也会有sessionStroage等本地存储



#大屏开发，要进行页面缩放

const scalePage = (width, height = 1350) => {
  let innerWidth = window.innerWidth;
  let innerHeight = window.innerHeight;
  let ratiox = innerWidth / width;
  let ratioy = innerHeight / height;
  document.querySelector('body').style.transform = 'scale(' + ratiox + ',' + ratioy + ')';
  document.querySelector('body').style.transformOrigin = '0 0';
};


    document.querySelector("body").style.width = "3200px";
    document.querySelector("body").style.height = "1350px";
	    scalePage(3200);
    window.onresize = () => {
      scalePage(3200);
    };
	
知识点：
1、强行设置页面的宽度：
document.querySelector("body").style.width = "3200px";

#前端登录时对用户名和密码加密：https://www.cnblogs.com/hlweng-0207/p/12971180.html
import { JSEncrypt } from 'jsencrypt'
import { JSEncrypt } from "jsencrypt/bin/jsencrypt.min.js";
// 加密公钥
const key = `----`
 
// 加密 ，核心方法：encrypt
export function setEncrypt (msg) {
  const jsencrypt = new JSEncrypt()
  jsencrypt.setPublicKey(key);//设置公钥
  return jsencrypt.encrypt(msg)
}
 
// 解密私钥
const privateKey = `---`
 
// 解密，核心方法：decrypt
export function decrypt (msg) {
  let decrypt = new JSEncrypt();
  decrypt.setPrivateKey(privateKey);//设置私钥
  var decryptMsg = decrypt.decrypt(msg);
  return decryptMsg;
}
#js中6种为真的情况，0、false、''，他们是相等的

#谷歌调试小技巧 https://blog.csdn.net/wonxxx/article/details/51902986

#文件上传方式：
1、表单方式
new FormData();
设置请求头 
headers: {
'Content-Type': 'multipart/form-data'
},
2、转换成二进制文件流 https://blog.csdn.net/a12336487213/article/details/110069582
aa(event){//选择的excel文件
            var file=event.target.files[0];
            console.log(file);
            var reader = new FileReader(); 
            reader.readAsBinaryString(file); 
            reader.onload=(e=>{
                var bb={lang:1,fileinfo:e.target.result,enen:2};
                console.log(bb)
                var xx = Qs.stringify(bb);
                console.log(xx);
            })
            
        }
tips:有文件有参数时，用 new FormData();

#文件下载：
1、文件流：
设置responseType: 'arraybuffer',或者responseType: 'blob'，es6里面提供responseType blob这种文件流的异步方式,
所以用原生ajax下载时要设置为异步的 ，如：xhr.open('GET', url, true)
2、压缩包等文件，非文件流
window.href.url = ,,也可以用responseType: 'arraybuffer',或者'blob'。
总结：文件下载都用responseType: 'arraybuffer',或者'blob'，
（1）若使用blob ，则接收时不需要再次转换成blob了，如 let  blob = new Blob([res.data]);可以直接
window.URL.createObjectURL(res.data)，因为URL.createObjectURL(res.data)可以接收blob作为参数;
（2）arraybuffer，则接收时需要转换成blob了，如 let  blob = new Blob([res.data]);然后window.URL.createObjectURL(blob);

#arraybuffer与blob 的区别：
https://blog.csdn.net/qq_36380426/article/details/103590764?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-6&spm=1001.2101.3001.4242
与 ArrayBuffer 区别：
1、Blob 用于操作二进制文件
2、ArrayBuffer 用于操作内存

#何为 URL.createObjectURL() ？
https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL
URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。
这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。
总结：URL.createObjectURL(object) ,object为File 对象或 Blob 对象

#FormData和FileReader https://www.jianshu.com/p/5b23b58ef0ca
总结：formData是向后台传输文件，fileReader是读取文件，实现预览，这里的预览是指图片，而不是文件
formData用法
 利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用ajax方法来异步的提交这个"表单"。
 使用FormData的最大优点就是我们可以异步上传一个二进制文件。文件、语音、视频等都是二进制文件。


#URL.createObjectURL() 和 FileReader.readAsDataURL()
https://www.cnblogs.com/xzdm/p/11939882.html
https://blog.csdn.net/qq_36671474/article/details/100545250
返回值：
	FileReader.readAsDataURL(blob)可以得到一段base64的字符串
    URL.createObjectURL(blob)得到的是当前文件的一个内存url

#前端请求方式 
https://blog.csdn.net/qq_42553082/article/details/84072301
https://segmentfault.com/a/1190000018774494

qs.stringify() 传数组时要先把数组转成字符串，JSON.stringify(arr)


#splice用法：
        [1, 2].splice(0, 0, 9);//9,1, 2 插在下标的前面
        [1, 2].splice(10000, 0, 9);//1, 2,9  若超出数组长度则插在末尾（其实还是插在下标的前面）

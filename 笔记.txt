#h5平台:简单理解为是用网址访问的，如：网站-H5手机端，即在手机上用网址访问的系统；

#vue 中，若data里引入了sessionStorage里的内容，但无对应的key值，则会报错，关键是此问题会影响程序运行，导致页面出不来
如：username: JSON.parse(sessionStorage.getItem("tapUserInfo")).userName ，sessionStorage里没有tapUserInfo，此时JSON.parse(tapUserInfo).userName 则会报错，导致页面程序停止运行

#vue.config.js 
1、代理的意思：https://blog.csdn.net/iteye_10432/article/details/103757786
proxy('/label', {...}) - 匹配以/api开始的路径，显然那些.JS、.css的文件就被顾虑掉了，只剩下前端调api请求接口的路径了，如：/label/sysManage/addApi.do
  proxy: {
      '/label': { 
        target: 'http://localhost:18989', // 后端域名及端口（端口后面也可以添加路径），若不考虑pathRewrite字段，则此时的请求路径是http://localhost:18989/label/sysManage/addApi.do
        secure: false,
        changeOrigin: true,
        timeout: 1800000,
		pathRewrite:{
		'/label':'',  //若此时添加此字段，则此时的路径是http://localhost:18989/sysManage/addApi.do ,即label就被去掉了
		},
      },
    }
通常情况下label 是前端自己定的，因为后端可能没这一层路径，所以不靠谱，还是自己加一层比较好。前端部署用nginx转发时也要用此通配符匹配

#vue-router里的resolve是干嘛的？ https://segmentfault.com/q/1010000021567820
这是异步加载代码的旧写法.
你可以改写成以下比较容易理解的写法.
component:()=>import('@/views/......')

#this.$router.resolve();https://www.jianshu.com/p/a5ef6eb32b76
resolve方法会返回一个跳转路由对象，可携带参数：

#window.open() 认识：https://www.douban.com/note/619576290/
window.open(url,'_blank'); //url若是 http://www.baidu.com这种，则直接跳转；若是文件路径，则会把当前的域名拼接在前面，如：浏览器里当前路径为http://localhost:8081/tjTowerWeb，
现执行 window.open('/Overview','_blank');//则在新窗口里的地址为 http://localhost:8081/tjTowerWeb/Overview，此时新窗口里也会有sessionStroage等本地存储



#大屏开发，要进行页面缩放

const scalePage = (width, height = 1350) => {
  let innerWidth = window.innerWidth;
  let innerHeight = window.innerHeight;
  let ratiox = innerWidth / width;
  let ratioy = innerHeight / height;
  document.querySelector('body').style.transform = 'scale(' + ratiox + ',' + ratioy + ')';
  document.querySelector('body').style.transformOrigin = '0 0';
};


    document.querySelector("body").style.width = "3200px";
    document.querySelector("body").style.height = "1350px";
	    scalePage(3200);
    window.onresize = () => {
      scalePage(3200);
    };
	
知识点：
1、强行设置页面的宽度：
document.querySelector("body").style.width = "3200px";

#前端登录时对用户名和密码加密：https://www.cnblogs.com/hlweng-0207/p/12971180.html
import { JSEncrypt } from 'jsencrypt'
import { JSEncrypt } from "jsencrypt/bin/jsencrypt.min.js";
// 加密公钥
const key = `----`
 
// 加密 ，核心方法：encrypt
export function setEncrypt (msg) {
  const jsencrypt = new JSEncrypt()
  jsencrypt.setPublicKey(key);//设置公钥
  return jsencrypt.encrypt(msg)
}
 
// 解密私钥
const privateKey = `---`
 
// 解密，核心方法：decrypt
export function decrypt (msg) {
  let decrypt = new JSEncrypt();
  decrypt.setPrivateKey(privateKey);//设置私钥
  var decryptMsg = decrypt.decrypt(msg);
  return decryptMsg;
}
#js中6种为真的情况中，0、false、''，他们是相等的，undefined 与null是相等的
#js中的数据类型https://www.w3school.com.cn/js/js_datatypes.asp
https://blog.csdn.net/lgno2/article/details/111659563?utm_term=js%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-111659563&spm=3001.4430
7种基本数据类型；number,boolean,undefined,string,null,symbol,bigint
1种引用类型：object,
其中：null,对象，数组为object类型;函数为function
# isNaN的理解：https://www.cnblogs.com/fmyao/p/12560182.html
isNaN() 是一个全局方法，它的作用是检查一个值是否能被 Number() 成功转换 。 如果能转换成功，就返回 false，否则返回 true 。
#谷歌调试小技巧 https://blog.csdn.net/wonxxx/article/details/51902986

#文件上传方式：
1、表单方式
new FormData();
设置请求头 
headers: {
'Content-Type': 'multipart/form-data'
},
2、转换成二进制文件流 https://blog.csdn.net/a12336487213/article/details/110069582
aa(event){//选择的excel文件
            var file=event.target.files[0];
            console.log(file);
            var reader = new FileReader(); 
            reader.readAsBinaryString(file); 
            reader.onload=(e=>{
                var bb={lang:1,fileinfo:e.target.result,enen:2};
                console.log(bb)
                var xx = Qs.stringify(bb);
                console.log(xx);
            })
            
        }
tips:有文件有参数时，用 new FormData();

#文件下载：
1、文件流：
设置responseType: 'arraybuffer',或者responseType: 'blob'，es6里面提供responseType blob这种文件流的异步方式,
所以用原生ajax下载时要设置为异步的 ，如：xhr.open('GET', url, true)
2、压缩包等文件，非文件流
window.href.url = ,,也可以用responseType: 'arraybuffer',或者'blob'。
总结：文件下载都用responseType: 'arraybuffer',或者'blob'，
（1）若使用blob ，则接收时不需要再次转换成blob了，如 let  blob = new Blob([res.data]);可以直接
window.URL.createObjectURL(res.data)，因为URL.createObjectURL(res.data)可以接收blob作为参数;
（2）arraybuffer，则接收时需要转换成blob了，如 let  blob = new Blob([res.data]);然后window.URL.createObjectURL(blob);

#arraybuffer与blob 的区别：
https://blog.csdn.net/qq_36380426/article/details/103590764?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-6&spm=1001.2101.3001.4242
与 ArrayBuffer 区别：
1、Blob 用于操作二进制文件
2、ArrayBuffer 用于操作内存

#何为 URL.createObjectURL() ？
https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL
URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。
这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。
总结：URL.createObjectURL(object) ,object为File 对象或 Blob 对象

#FormData和FileReader https://www.jianshu.com/p/5b23b58ef0ca
总结：formData是向后台传输文件，fileReader是读取文件，实现预览，这里的预览是指图片，而不是文件
formData用法
 利用FormData对象,我们可以通过JavaScript用一些键值对来模拟一系列表单控件,我们还可以使用ajax方法来异步的提交这个"表单"。
 使用FormData的最大优点就是我们可以异步上传一个二进制文件。文件、语音、视频等都是二进制文件。


#URL.createObjectURL() 和 FileReader.readAsDataURL()
https://www.cnblogs.com/xzdm/p/11939882.html
https://blog.csdn.net/qq_36671474/article/details/100545250
返回值：
	FileReader.readAsDataURL(blob)可以得到一段base64的字符串
    URL.createObjectURL(blob)得到的是当前文件的一个内存url

#前端请求方式 
https://blog.csdn.net/qq_42553082/article/details/84072301
https://segmentfault.com/a/1190000018774494

qs.stringify() 传数组时要先把数组转成字符串，JSON.stringify(arr)


#splice用法：
        [1, 2].splice(0, 0, 9);//9,1, 2 插在下标的前面
        [1, 2].splice(10000, 0, 9);//1, 2,9  若超出数组长度则插在末尾（其实还是插在下标的前面）
#模拟csrf攻击；

#webpack学习

#window.open() 在新框口中拥有相同的sessionStorage等本地存储
#vue中 window.open跳转带参数 https://blog.csdn.net/weixin_42418774/article/details/103613708
#js中使用 && 实现 if 判断  https://www.cnblogs.com/fm060/p/11671764.html
$step < 1 && $step = 5;
 
等于
 
if($step < 1) {
    $step = 5;
}
Tip：无法使用return ，且比三目运算符少一个“为假”的条件
#vue中的watch监听：
如果activeData.__config__.label 与activeId 连续被更改，则他们在watch里的响应是按照他们在watch里的排序来的，而不是按照他们被更改时的顺序确定的
# apply,all,bind arguments 区别 https://www.cnblogs.com/binguo666/p/10533733.html
#Vue 父子组件通信 $attrs及$listeners   inheritAttrs属性使用教程
https://blog.csdn.net/liangrongliu1991/article/details/100555091?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control
https://blog.csdn.net/qq_33769914/article/details/87607796?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control

#element table 多表头固定列 fixed 不能一起固定，解决方法：
https://segmentfault.com/q/1010000023653841
方法一、给一级加宽度就好了，但要保证这个宽度足够大
方法二、给一级加宽度，子级也加宽度，子级的宽度和等于小于一级

#if()为假的情况https://blog.csdn.net/qq_30756847/article/details/52699115
#vuecli3.0已经加了转码器babel，但TS这个语法没有翻译。而vuex-persist正是用TS写的。
若想用vuex-persist，得添加指定的转码器
vuex-persistedstate 与vuex-persist的区别？ https://blog.csdn.net/weixin_44309374/article/details/101150536
#props传基本类型与对象类型的区别：
1、在对一个 prop 进行“双向绑定,单向修改”的场景下，因为子组件不能直接修改父组件
https://blog.csdn.net/weixin_42776111/article/details/108979101
#父组件将age传给子组件并使用.sync修饰符。
更新基本类型数据时可以用此简便方法
<MyFooter :age.sync="age">
</MyFooter>
//子组件触发事件
 mounted () {
    console.log(this.$emit('update:age',1234567));
 }
2、props传对象：
https://www.cnblogs.com/pangchunlei/p/12110869.html
#vue样式穿透 ::v-deep的具体使用，三者关系：>>> 、/deep/ 、::v-deep
https://www.cnblogs.com/aidixie/p/13555680.html
#在Vue.js中定义组件模板的7种方法
https://blog.csdn.net/qq_43067585/article/details/107554455
Tips:字符串模板
#xss攻击 
https://www.cnblogs.com/goloving/p/14700777.html
1、v-html与innerHTML相似， v-html指令最终调用的是innerHTML方法，会过滤script标签，但无法过滤img标签，所以会有漏洞
1、jquery的$().html();不会过滤script和img标签，所以更危险
#mixins 
https://www.cnblogs.com/Ivy-s/p/9937173.html
https://blog.csdn.net/qq_38128179/article/details/107817436  ，里的Mixins合并冲突重点看
什么时候使用Mixins？
当我们存在多个组件中的数据或者功能很相近时，我们就可以利用mixins将公共部分提取出来，通过 mixins封装的函数，组件调用他们是不会改变函数作用域外部的。

Tips:
1、被应用多次时不会被修改，独立的；
2、data、methods重复时 父组件覆盖子组件；
3、生命钩子重复时：子组件的先执行，父组件的后执行
#Vue打包文件放在服务器后，浏览器存在缓存问题
https://www.cnblogs.com/qiu-Ann/p/11394504.html

#自定义组件上使用v-model
https://www.jianshu.com/p/50ddd91dcbbc
重点看：model选项，理解该选项的用途,model专门为起别名而定制的一个选项，相当于转接器
使用场景：改变v-model默认指定的属性value和事件event的名称；
默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event，
model选项就是改变这种默认行为的，比如把自定义的属性 如name 用作prop，和 自定义的updataVal 用作event，
则结果为：
model:{
prop:'name',
event:'updataVal'
},
props:{
name:{
type:String,
default:''
},
},
#vue 组件嵌套多层的解决方法：
provide inject 
https://segmentfault.com/a/1190000021216039
https://zhuanlan.zhihu.com/p/107819097 与mixin 的区别

#懒加载import与require https://www.cnblogs.com/xiaomili/p/10779827.html
使用路由懒加载的写法，可以把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，起到项目优化作用，
若不使用懒加载，则页面加载后，network里始终是两个文件：app.js 与chunk-venders.js，这两个文件在运行项目时就会加载，里面包含了整个项目的组件，比如整个项目的大小是8M,则一开始就下载8M
组件懒加载：
https://www.jb51.net/article/162858.htm
#npm 和 npx 有什么区别？https://www.zhihu.com/question/327989736/answer/787995048
可以直接寻址，不需要进入到目录里
#前端为什么要起服务
https://blog.csdn.net/youyuliu/article/details/82598399
https://www.cnblogs.com/suoking/p/10544332.html
为什么浏览器要限制跨域访问? https://www.zhihu.com/question/26379635  
#nginx 跨域原理，https://segmentfault.com/a/1190000022415375
使用Nginx端口转发，本质上就是：让浏览器认为前台和后台是同一个域，就不会产生跨域请求。
nginx转发给其他服务时不会产生跨域问题，跨域只是针对浏览器，而不针对nginx服务器
开发者事先约定好，根据不同的请求地址，来访问不同的服务器。
Nginx接收到数据之后，根据地址，转发给相应的服务器来处理。
如果需要另外安排其他的服务，来实现文件上传功能的话，只需要把URL处理一下，加上不同的前缀即可。
#为什么form表单提交没有跨域问题，但ajax提交有跨域问题？https://www.zhihu.com/question/31592553
传统form表单提交浏览器会发生跳转，form是标签，不是js脚本，这种并不能叫跨域啊！那我还想问为什么a标签跳转到别的域名不存在跨域呢？
#本地启动服务方法：
1、http-server，安装npm http-server，启动； npx http-server -c-1 --proxy http://www.baidu.com。参见：https://blog.csdn.net/weixin_45029879/article/details/108296329
2、webpaclk-dev-server,安装:(1)webpack-dev-server@2只支持webpack@3及之前版本，安装步骤：npm i webpack@3 webpack-dev-server@2 -D，启动：npx webpack-dev-server，然后在webpack.config.js中配置devServer项
#exports与module.exports 区别https://www.zhihu.com/question/26621212
不要给exports直接赋值 ，如：exports = {name:232}，因为此时exports就不是指向module.exports了，此时通过require() 引入时就会出错，所以只能exports.属性名 = 值，这种

#在html中使用es6规范，export、import  http://www.zyiz.net/tech/detail-145950.html，在script上加个type='module'

#@vue/cli-plugin-babel与 @vue/babel-preset-app 的关系 https://www.zhihu.com/question/370689302
@vue/cli-plugin-babel 文档里提到了集成了 @vue/babel-preset-app，@vue/babel-preset-app 文档里提到了集成了 babel-preset-env 这个 babel preset，preset-env
 会基于你的浏览器目标自动决定要运用的语法转换和 polyfill。
 
#Vue的路由实现原理：hash模式 和 history模式区别

#资源预加载preload和资源预读取prefetch简明学习https://www.cnblogs.com/xiaohuochai/p/9183874.html
preload如果忽略 as 属性，或者错误的 as 属性会使 preload 等同于 XHR 请求，浏览器不知道加载的是什么，因此会赋予此类资源非常低的加载优先级

#Vue组件懒加载(异步延迟加载和彻底懒加载)	https://zhuanlan.zhihu.com/p/147922995